{"version":3,"sources":["serviceWorker.js","components/boardsComponent/index.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","background","backgroundColor","title","flexGrow","container","padding","myBoardStyle","fontWeight","color","functionBar","paddingLeft","paddingRight","paddingTop","paddingBottom","addBoardStyle","borderStyle","borderWidth","borderColor","margin","addBoardIcon","fontSize","display","theme","createMuiTheme","spacing","palette","default","ButtonAppBar","useState","rawBoardsData","setRawBoardsData","boardsData","setBoardsData","classes","useEffect","fetch","then","res","json","result","boards","options","scales","xAxes","ticks","beginAtZero","gridLines","yAxes","reverse","legend","getData","value","labels","datasets","data","parseInt","count","count2","count3","AppBar","position","className","Toolbar","Typography","variant","Button","CssBaseline","Container","maxWidth","Grid","alignItems","item","TextField","label","onChange","e","textSearch","target","filtedData","filter","name","toLowerCase","includes","id","xs","sm","md","lg","join","map","key","style","wordWrap","date","toLocaleString","month","float","clear","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b5f200d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React , {useState,useEffect} from 'react';\r\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport { Container, CssBaseline, Grid, MuiThemeProvider, Paper, TextField } from '@material-ui/core';\r\nimport './index.css';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    background: {\r\n        backgroundColor: '#2196f3',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    container:{\r\n        padding:  40,\r\n    },\r\n    myBoardStyle: {\r\n        fontWeight: 'bold',\r\n        color: '#283593', \r\n    },\r\n    functionBar:{\r\n        backgroundColor: '#FFFFFF',\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n    },\r\n    addBoardStyle:{\r\n        borderStyle: 'dashed',\r\n        borderWidth: 2,\r\n        borderColor: '#ccc',\r\n        margin: 10\r\n    },\r\n    addBoardIcon:{\r\n        color: '#8e24aa',\r\n        fontSize: 60,\r\n        display: 'block',\r\n        display: 'inline',\r\n    }\r\n});\r\n\r\nconst theme = createMuiTheme({\r\n    spacing: 10,\r\n    palette: {\r\n        background: {\r\n          default: \"#F3F3F3\",\r\n        }\r\n  \r\n      },\r\n})\r\n\r\n\r\nexport default function ButtonAppBar() {\r\n    const [rawBoardsData,setRawBoardsData] = useState([]); //state for data after fetching\r\n     const [boardsData, setBoardsData] = useState([]);  //state for data when searching boards\r\n     const classes = useStyles();\r\n\r\n     useEffect(() => {\r\n         fetch(\"https://my-fun-retro-api.herokuapp.com/\")\r\n         .then(res => res.json())\r\n         .then(\r\n             (result) => {\r\n                 setRawBoardsData(result.boards);\r\n                 setBoardsData(result.boards);\r\n             }\r\n         )\r\n     }, []);\r\n\r\n      const options = {\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true,\r\n                    display: false,\r\n                  },\r\n                  gridLines: {\r\n                    display: false,\r\n                  },\r\n                },\r\n              ],\r\n            yAxes: [\r\n                {\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        display: false,\r\n                        reverse: true,\r\n                    },\r\n                    gridLines: {\r\n                        display: false,\r\n                      },\r\n                },\r\n            ],\r\n        },\r\n        legend: {\r\n            display: false\r\n         },\r\n      }\r\n      const getData = (value) => ({\r\n        labels: ['Went Well', 'To Improve', 'Action Items'],\r\n        datasets: [\r\n          {\r\n            data: [parseInt(value.count) , parseInt(value.count2) , parseInt(value.count3)],\r\n            backgroundColor: [\r\n              '#009688',\r\n              '#e91e63',\r\n              '#9c27b0',\r\n            ],                                        \r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n    })\r\n\r\n    const onTextChanging = (e) => {\r\n        const textSearch = e.target.value;\r\n        const rawData = [...rawBoardsData];\r\n        const filtedData = rawData.filter(data => data.name.toLowerCase().includes(textSearch.toLowerCase()));\r\n        setBoardsData(filtedData);\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <AppBar position=\"static\" className = {classes.background}>\r\n            \r\n            <Toolbar>\r\n                <Typography className = {classes.title} variant=\"h6\">\r\n                    My Fun Retro\r\n                </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <MuiThemeProvider theme = {theme}>\r\n            <CssBaseline></CssBaseline>\r\n            <Container maxWidth = 'lg' className={classes.container}>\r\n                <Typography variant=\"h5\" className={classes.myBoardStyle}>My boards</Typography>\r\n                <div className={classes.functionBar}>\r\n                    <div className={classes.margin}>\r\n                        <Grid container spacing={1} alignItems=\"flex-end\">\r\n                        <Grid item>\r\n                            <SearchIcon />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <TextField label=\"Searching boards\" onChange={onTextChanging} />\r\n                        </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </div>\r\n                <br/><br/>\r\n                <Typography variant=\"h6\" className={classes.myBoardStyle}>Public boards</Typography><br/>\r\n                <div>\r\n                    <Grid container spacing={3}>\r\n                        <Grid id=\"add-board-block\" item xs = {12} sm = {4} md = {3} lg ={2} className = {classes.addBoardStyle}>                            \r\n                            <p className = \"text-align-center\"><AddCircleIcon className={classes.addBoardIcon}></AddCircleIcon></p>\r\n                            <p className={[\"text-align-center\",\"purpleText\"].join(' ')}><b>Add board</b></p>              \r\n                        </Grid>\r\n                        {boardsData.map((value,key) => (\r\n                            <Grid id=\"grid-item\" key ={key} item xs = {12} sm = {4} md = {3} lg ={2} style={{wordWrap: 'break-word',backgroundColor: '#FFFFFF', margin: 10}}>\r\n                                <Typography style={{color: '#626262'}}>{value.name}</Typography>\r\n                                <Typography style={{color: '#a8a8a8', fontSize: '0.75rem'}}><ScheduleIcon style={{fontSize: '0.75rem'}}></ScheduleIcon> {value.date.toLocaleString('default', { month: 'long' })} <span style={{float: 'right'}}>{parseInt(value.count) + parseInt(value.count2) + parseInt(value.count3)} cards</span></Typography>\r\n                                <hr style={{clear: 'left'}}/>\r\n                              \r\n                                <Bar data={getData(value)} options={options} /> \r\n                            </Grid>\r\n                        ))}\r\n                        \r\n                    </Grid>\r\n                </div>\r\n\r\n            </Container>\r\n        </MuiThemeProvider>\r\n    </>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Boards from './components/boardsComponent';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Boards />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}